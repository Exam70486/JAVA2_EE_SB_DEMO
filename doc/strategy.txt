/********************************************/
-- STRATEGY
/********************************************/

-- [_] Deploy application locally.

-- [_] Deploy application remotely.

    -- [_] codesandbox.

    -- [_] SPRINGBOOT CORS POLICY.

-- [_] JSON return.    

-- [_] Getting properties values.    

-- [_] Database.

            I'd be glad to assist you with establishing a Java Spring Boot connection to a SQL Server database. 
            Here's a comprehensive guide incorporating best practices and addressing potential issues:

            1. Prerequisites:

            --[x] a. Java Development Kit (JDK): Ensure you have a compatible JDK installed (e.g., JDK 11 or later).
            --[x] b. Spring Boot: Set up a Spring Boot project using your preferred method (Spring Initializr, **Maven**, or Gradle).
            --[x] c. SQL Server JDBC Driver: 
                     --[x] Download the appropriate SQL Server JDBC driver from Microsoft's website 
                     --[x] and add it to your project's classpath.

"La propiedad "encrypt" está establecida en "true" y la propiedad "trustServerCertificate" está establecida en "false", 
pero el controlador no pudo establecer una conexión segura a SQL Server mediante el cifrado de Capa de sockets seguros (SSL): 
Error: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. ClientConnectionId:74b59248-1e8d-4b9d-834d-24a4af036d0b"   

-- [_] reading properties.

    -- [_] GET VERSION.

-- [_] CSV DEMO.

    -- [x] Connection string (7gual al anterior).

    -- [_] SQL QUERY. 

     SELECT 
         [Id_Column]
        ,[NombreCompleto]
        ,[ProfesionOficio]
        ,[Ciudad]
    FROM
        [dbo].[Persona]
    ORDER BY 
        Id_Column

    -- [_] ENTITY

    public partial class Persona
    {
        public int ID_column { get; set; }
        public string NombreCompleto { get; set; }
        public string ProfesionOficio { get; set; }
        public string Ciudad { get; set; }
    }

-- [_] DIJKSTRA DEMO.

    -- [x] RETURN STRING DEMO.

            -- [x] https://angularwebapidemo.somee.com/demos/GenerateRandomVertex_CPP?p_vertexSize=9&p_sourcePoint=0

            -- [x] GenerateRandomVertex_SpringBoot

            -- [x] [2,20]|[15,22]|[1,17]|[8,19]|[14,6]|[13,8]|[5,12]|[4,14]|[22,5]■{0,0,0,6,18,16,0,0,0}|{0,0,14,0,0,0,0,0,18}|{0,14,0,0,0,0,6,0,24}|{6,0,0,0,0,12,0,6,0}|{18,0,0,0,0,0,0,0,0}|{16,0,0,12,0,0,8,0,0}|{0,0,6,0,0,8,0,2,18}|{0,0,0,6,0,0,2,0,0}|{0,18,24,0,0,0,18,0,0}■00&lt;[2;20]&gt;-00-<br/>01&lt;[15;22]&gt;-34-[0;3]≡[3;7]≡[7;6]≡[6;2]≡[2;1]≡<br/>02&lt;[1;17]&gt;-20-[0;3]≡[3;7]≡[7;6]≡[6;2]≡<br/>03&lt;[8;19]&gt;-06-[0;3]≡<br/>04&lt;[14;6]&gt;-18-[0;4]≡<br/>05&lt;[13;8]&gt;-16-[0;5]≡<br/>06&lt;[5;12]&gt;-14-[0;3]≡[3;7]≡[7;6]≡<br/>07&lt;[4;14]&gt;-12-[0;3]≡[3;7]≡<br/>08&lt;[22;5]&gt;-32-[0;3]≡[3;7]≡[7;6]≡[6;8]≡

            -- [x][2,20]|[15,22]|[1,17]|[8,19]|[14,6]|[13,8]|[5,12]|[4,14]|[22,5]?{0,0,0,6,18,16,0,0,0}|{0,0,14,0,0,0,0,0,18}|{0,14,0,0,0,0,6,0,24}|{6,0,0,0,0,12,0,6,0}|{18,0,0,0,0,0,0,0,0}|{16,0,0,12,0,0,8,0,0}|{0,0,6,0,0,8,0,2,18}|{0,0,0,6,0,0,2,0,0}|{0,18,24,0,0,0,18,0,0}?00<[2;20]>-00-01<[15;22]>-34-[0;3]?[3;7]?[7;6]?[6;2]?[2;1]?02<[1;17]>-20-[0;3]?[3;7]?[7;6]?[6;2]?03<[8;19]>-06-[0;3]?04<[14;6]>-18-[0;4]?05<[13;8]>-16-[0;5]?06<[5;12]>-14-[0;3]?[3;7]?[7;6]?07<[4;14]>-12-[0;3]?[3;7]?08<[22;5]>-32-[0;3]?[3;7]?[7;6]?[6;8]?

            -- [x][2,20]|[15,22]|[1,17]|[8,19]|[14,6]|[13,8]|[5,12]|[4,14]|[22,5]&#x25A0;{0,0,0,6,18,16,0,0,0}|{0,0,14,0,0,0,0,0,18}|{0,14,0,0,0,0,6,0,24}|{6,0,0,0,0,12,0,6,0}|{18,0,0,0,0,0,0,0,0}|{16,0,0,12,0,0,8,0,0}|{0,0,6,0,0,8,0,2,18}|{0,0,0,6,0,0,2,0,0}|{0,18,24,0,0,0,18,0,0}&#x25A0;00&lt;[2;20]&gt;-00-<br/>01&lt;[15;22]&gt;-34-[0;3]&#x2261;[3;7]&#x2261;[7;6]&#x2261;[6;2]&#x2261;[2;1]&#x2261;<br/>02&lt;[1;17]&gt;-20-[0;3]&#x2261;[3;7]&#x2261;[7;6]&#x2261;[6;2]&#x2261;<br/>03&lt;[8;19]&gt;-06-[0;3]&#x2261;<br/>04&lt;[14;6]&gt;-18-[0;4]&#x2261;<br/>05&lt;[13;8]&gt;-16-[0;5]&#x2261;<br/>06&lt;[5;12]&gt;-14-[0;3]&#x2261;[3;7]&#x2261;[7;6]&#x2261;<br/>07&lt;[4;14]&gt;-12-[0;3]&#x2261;[3;7]&#x2261;<br/>08&lt;[22;5]&gt;-32-[0;3]&#x2261;[3;7]&#x2261;[7;6]&#x2261;[6;8]&#x2261;

            -- [>] ERROR LECTURA URL DESDE angular

                -- [_] http://localhost:8080/GenerateRandomVertex_SpringBoot 

                -- [_] DESDE ANGULAR   : [2,20]|[15,22]|[1,17]|[8,19]|[14,6]|[13,8]|[5,12]|[4,14]|[22,5]&#x25A0; ...

                -- [_] DESDE NAVEGADOR : [2,20]|[15,22]|[1,17]|[8,19]|[14,6]|[13,8]|[5,12]|[4,14]|[22,5]■{0,0,0,6,18,16,0,0,0}|{0,0,14,0,0,0,0,0,18}|{0,14,0,0,0,0,6,0,24}|{6,0,0,0,0,12,0,6,0}|{18,0,0,0,0,0,0,0,0}|{16,0,0,12,0,0,8,0,0}|{0,0,6,0,0,8,0,2,18}|{0,0,0,6,0,0,2,0,0}|{0,18,24,0,0,0,18,0,0}
                        ■00<[2;20]>-00-
                        01<[15;22]>-34-[0;3]≡[3;7]≡[7;6]≡[6;2]≡[2;1]≡
                        02<[1;17]>-20-[0;3]≡[3;7]≡[7;6]≡[6;2]≡
                        03<[8;19]>-06-[0;3]≡
                        04<[14;6]>-18-[0;4]≡
                        05<[13;8]>-16-[0;5]≡
                        06<[5;12]>-14-[0;3]≡[3;7]≡[7;6]≡
                        07<[4;14]>-12-[0;3]≡[3;7]≡
                        08<[22;5]>-32-[0;3]≡[3;7]≡[7;6]≡[6;8]≡

    -- [_] COMPARAR ALGORITMO DESDE C++.

    -- [>] COMPARAR ALGORITMO DESDE C#.

        public string GenerateRandomVertex(ushort p_vertexSize, ushort p_sourcePoint)
        {
            //
            ushort p_sampleSize = 23;
            string status       = string.Empty;

            //
            status = AlgorithmManager.GenerateRandomPoints(p_vertexSize, p_sampleSize, p_sourcePoint);

            //
            return status;
        }

        
        public static string GenerateRandomPoints(int vertexSize, int sampleSize, int sourcePoint)
        {
            //
            int[,] graph         = new int[vertexSize, vertexSize];
            // 
            string statusMessage = string.Empty;
            DateTime dt          = DateTime.Now;
            //
            Random rand_x = new Random(dt.Millisecond / 2);
            Random rand_y = new Random(dt.Millisecond * 2);
            //
            int[] vertex_X            = FisherYates(sampleSize, rand_x);
            int[] vertex_Y            = FisherYates(sampleSize, rand_y);
            List<string> vertexArray  = new List<string>();
            //
            for (int index = 0; index < vertexSize; index++)
            {
                //
                string separator_1 = (index < vertexSize - 1) ? "|" : "";
                //
                vertexArray.Add(string.Format("[{0},{1}]{2}", vertex_X[index], vertex_Y[index], separator_1));
            }
            //
            StringBuilder vertexArrayString = new StringBuilder();
            //
            for (int index = 0; index < vertexSize; index++)
            {
                vertexArrayString.Append(vertexArray[index]);
            }
            //
            string separator_2  = "■";
            //
            string vertexMatrix = GenerateRandomMatrix(vertexArray, graph,vertexSize);
            //
            string vertexList   = Dijkstra(vertexArray, graph, vertexSize, sampleSize, sourcePoint);
            //
            string sortedListEncoded = string.Empty;
            sortedListEncoded = HttpUtility.HtmlEncode(vertexList);
            sortedListEncoded = sortedListEncoded.Replace(@",", @"<br/>");
            sortedListEncoded = sortedListEncoded.Replace(@"\t", @"&nbsp;");
            //
            statusMessage = string.Format("{0}{1}{2}{1}{3}", vertexArrayString, separator_2, vertexMatrix, sortedListEncoded);
            //
            //LogModel.Log(string.Format("DIJSTRA_DEMO. GENERATE_RANDOM_VERTEX : {0}", statusMessage));
            //
            return statusMessage;
        }
        //
        public static string GenerateRandomMatrix(List<string> vertexString, int[,] graph, int vertexSize)
        {
            StringBuilder statusMessage = new StringBuilder();
            //
            for (int index = 0; index < vertexSize; index++)
            {
                graph[index, index] = 0;
            }
            //
            DateTime dt = DateTime.Now;
            Random rnd  = new Random(dt.Millisecond * 3);
            //
            for (int index_x = 0; index_x < vertexSize; index_x++)
            {
                
                //
                for (int index_y = (index_x + 1); index_y < vertexSize; index_y++)
                {
                    //
                    double randomValue = rnd.Next(0, 2);

                    if (randomValue == 1)
                    {
                        //
                        randomValue = GetHipotemuza(vertexString, index_x, index_y);
                    }

                    //
                    graph[index_x, index_y] = Convert.ToInt32(randomValue);
                    graph[index_y, index_x] = Convert.ToInt32(randomValue);
                }
            }

            for (int index_x = 0; index_x < vertexSize; index_x++)
            {
                //
                int zeroCount = 0;

                //
                for (int index_y = 0; index_y < vertexSize; index_y++)
                {
                    // DESCARTA DIAGONAL Y VERIFICAR EXISTENCIA DE VALOR "CERO"
                    if ((index_x != index_y) && (graph[index_x,index_y] == 0))
                    {
                        //
                        zeroCount++;

                        // GARANTIZAR CONECTIVIDAD DE AL MENOS UN PUNTO
                        if (zeroCount == (vertexSize - 1))
                        {
                            //
                            int hipotemuza          = Convert.ToInt32(GetHipotemuza(vertexString, index_x, index_y));
                            graph[index_x, index_y] = hipotemuza;
                            graph[index_y, index_x] = hipotemuza;
                        }
                    }
                }
            }

            //
            for (int index_x = 0; index_x < vertexSize; index_x++)
            {
                //
                string separator_1 = (index_x < vertexSize - 1) ? "|" : "";
                //
                StringBuilder stringArray = new StringBuilder();
                //
                string stringArrayValues = string.Empty;
                //
                for (int index_y = 0; index_y < vertexSize; index_y++)
                {
                    //
                    string separator_2 = (index_y < vertexSize - 1) ? "," : "";
                    //
                    stringArray.Append(string.Format("{0}{1}", graph[index_x, index_y].ToString(), separator_2));
                }
                //
                stringArrayValues = string.Format("{{{0}}}", stringArray.ToString());
                //
                //LogModel.Log(string.Format("DIJSTRA_DEMO. GENERATE_RANDOM_MATRIX : {0}|{1} ", index_x, stringArrayValues));
                //
                statusMessage.Append(string.Format(@"{0}{1}", stringArrayValues, separator_1));
            }
            return statusMessage.ToString();
        } 

////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.List;
import java.util.Random;
import java.lang.StringBuilder;

public class MatrixGenerator {


    public static String generateRandomMatrix(List<String> vertexString, int[][] graph, int vertexSize) {
        StringBuilder statusMessage = new StringBuilder();
        
        for (int index = 0; index < vertexSize; index++) {
            graph[index][index] = 0;
        }
        
        long currentTimeMillis = System.currentTimeMillis();
        Random rnd = new Random(currentTimeMillis % 1000);
        
        for (int index_x = 0; index_x < vertexSize; index_x++) {
            for (int index_y = (index_x + 1); index_y < vertexSize; index_y++) {
                double randomValue = rnd.nextInt(2);

                if (randomValue == 1) {
                    randomValue = getHipotemuza(vertexString, index_x, index_y);
                }

                graph[index_x][index_y] = (int) randomValue;
                graph[index_y][index_x] = (int) randomValue;
            }
        }

        for (int index_x = 0; index_x < vertexSize; index_x++) {
            int zeroCount = 0;

            for (int index_y = 0; index_y < vertexSize; index_y++) {
                if ((index_x != index_y) && (graph[index_x][index_y] == 0)) {
                    zeroCount++;

                    if (zeroCount == (vertexSize - 1)) {
                        int hipotemuza = (int) getHipotemuza(vertexString, index_x, index_y);
                        graph[index_x][index_y] = hipotemuza;
                        graph[index_y][index_x] = hipotemuza;
                    }
                }
            }
        }

        for (int index_x = 0; index_x < vertexSize; index_x++) {
            String separator_1 = (index_x < vertexSize - 1) ? "|" : "";
            StringBuilder stringArray = new StringBuilder();
            String stringArrayValues = "";

            for (int index_y = 0; index_y < vertexSize; index_y++) {
                String separator_2 = (index_y < vertexSize - 1) ? "," : "";
                stringArray.append(String.format("%d%s", graph[index_x][index_y], separator_2));
            }
            stringArrayValues = String.format("{%s}", stringArray.toString());
            statusMessage.append(String.format("%s%s", stringArrayValues, separator_1));
        }
        return statusMessage.toString();
    }

    private static double getHipotemuza(List<String> vertexString, int index_x, int index_y) {
        // Implement the logic for GetHipotemuza here
        return 0; // Placeholder return value
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.StringJoiner;

public class RandomPointGenerator {
    public static String generateRandomPoints(int vertexSize, int sampleSize, int sourcePoint) {
        int[][] graph = new int[vertexSize][vertexSize];
        String statusMessage = "";
        long currentTimeMillis = System.currentTimeMillis();
        Random randX = new Random(currentTimeMillis / 2);
        Random randY = new Random(currentTimeMillis * 2);

        int[] vertexX = fisherYates(sampleSize, randX);
        int[] vertexY = fisherYates(sampleSize, randY);
        List<String> vertexArray = new ArrayList<>();

        for (int index = 0; index < vertexSize; index++) {
            String separator1 = (index < vertexSize - 1) ? "|" : "";
            vertexArray.add(String.format("[%d,%d]%s", vertexX[index], vertexY[index], separator1));
        }

        StringJoiner vertexArrayString = new StringJoiner("");
        for (String vertex : vertexArray) {
            vertexArrayString.add(vertex);
        }

        String separator2 = "■";
        String vertexMatrix = generateRandomMatrix(vertexArray, graph, vertexSize);
        String vertexList = dijkstra(vertexArray, graph, vertexSize, sampleSize, sourcePoint);

        String sortedListEncoded = vertexList.replace(",", "<br/>").replace("\t", "&nbsp;");
        statusMessage = String.format("%s%s%s%s%s", vertexArrayString.toString(), separator2, vertexMatrix, sortedListEncoded);

        // LogModel.log(String.format("DIJSTRA_DEMO. GENERATE_RANDOM_VERTEX : %s", statusMessage));

        return statusMessage;
    }

    // Placeholder for the FisherYates method
    private static int[] fisherYates(int sampleSize, Random rand) {
        // Implementation needed
        return new int[sampleSize];
    }

    // Placeholder for the generateRandomMatrix method
    private static String generateRandomMatrix(List<String> vertexArray, int[][] graph, int vertexSize) {
        // Implementation needed
        return "";
    }

    // Placeholder for the dijkstra method
    private static String dijkstra(List<String> vertexArray, int[][] graph, int vertexSize, int sampleSize, int sourcePoint) {
        // Implementation needed
        return "";
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////

-- [_] BOTON MENSAJE DE ESPERA ENALGORITMO DISTANCIA CORTA.

-- [_] CRUD MARKETING.

////////////////////////////////////////////////////////////////////////////////////////////////////

